@startuml
title SHOOT Base Gun

participant View
participant Controller
participant DecoratedGun
participant Model
== Started turn ==

View -> Controller: NewTurnEvent
Controller -> Controller: set remainingActions = 2

== SHOOT ==

Controller -> View: showAvailableActions()
View -> Controller: ActionChosenEvent(SHOOT)
Controller -> Controller: ExpectingShootState(null)
Controller -> View: showLoadedGuns()
View -> Controller: GunChosenEvent(gun)
Controller -> DecoratedGun: decoratedGun.executeShootFlow()
Controller -> Controller: ExecutingGunFlowState(decoratedGun, null)
DecoratedGun -> View: showApplicableEffects(Map<PlayerColor, Optional<Integer[]>> baseEffect, int numberOfChoosablePlayerBaseEffect, Optional<Map<PlayerColor, Optional<Integer[]>>> firstExtraEffect, int numberOfChoosablePlayerFirstExtraEffect, Optional<Map<PlayerColor, Optional<Integer[]>>> secondExtraEffect, int numberOfChoosablePlayerSecondExtraEffect)
View -> DecoratedGun: ChosenBaseEffectConfigurationEvent(configurationBaseEffect, configurationExtraEffectOne, configurationExtraEffectTwo)
DecoratedGun -> Model: mutate whole model
Model -> View: various DashboardCellUpdated, various PlayersDashboardUpdated
DecoratedGun -> Controller: endGunFlowCallBack()

loop playerKilled
  Controller -> Model: update model
  Model -> View: various DashboardCellUpdated, various PlayersDashboardUpdated, GameStatusUpdated,

end

Controller -> Controller: ShootCompletedState(killedPlayersToProcess)

== Respawn phase ==

loop playerKilled
  Controller -> Model: add PowerUpCard To PlayerDashboard
  Model -> View: PlayersDashboardUpdated
  Controller -> View: showAvailableRespawnLocations()
  View -> Controller: RespawnLocationChosenEvent()
  Controller -> Model: update DashboardCell, PlayerDashboard
  Model -> View: DashboardCellUpdated, PlayerDashboardUpdated

end

== Reload phase ==

Controller -> View: showReloadableGuns()
View -> Controller: ReloadGunsEvent(gunsToReload)
Controller -> Model: mutate player dashboard model
Model -> View: PlayerDashboardUpdated(playerDashboard)


== Refill Dashboard ==

Controller -> Model: refill dashboard cells
Model -> View: DashboardCellUpdated(dashboard, cell1)
Model -> View: DashboardCellUpdated(dashboard, celln)

@enduml
