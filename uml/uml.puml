@startuml

enum AmmoColor {
    RED,
    YELLOW,
    BLUE
}

interface Gun {
    +List<AmmoColor> getRequiredAmmoToPickup();
    +List<AmmoColor> getRequiredAmmoToReload();
    +void visit(Consumer<AlternativeEffectGun> visitAlternativeEffectGun, Consumer<BaseEffectGun> visitBaseEffectGun)
}

abstract class BaseGun implements Gun {
    -firstAmmo: AmmoColor
    -extraAmmo: List<AmmoColor>
    -name: String
    -note: Optional<String>
}

class AlternativeEffectGun extends BaseGun {
    -firstEffect: Effect
    -secondEffect: Effect
    -secondEffectCost: List<AmmoColor>

    +Effect getFirstEffect()
    +Effect getSecondEffect()
    +List<AmmoColor> getSecondEffectCost()
}
class BaseEffectGun extends BaseGun {
    -baseEffect: Effect
    -firstExtraEffect: Optional<Effect>
    -firstExtraEffectCost: Optional<List<AmmoColor>>
    -secondExtraEffect: Optional<Effect>
    -secondExtraEffectCost: Optional<List<AmmoColor>>

    +Effect getBaseEffect()
    +Optional<Effect> getFirstExtraEffect()
    +Optional<List<AmmoColor>> getFirstExtraEffectCost()
    +Optional<Effect> getSecondExtraEffect()
    +Optional<List<AmmoColor>> getSecondExtraEffectCost()
}

class PowerUpCard{
    -ammoColor: AmmoColor
    -powerUpType: PowerUpType
    +AmmoColor getAmmoColor()
    +PowerUpType getPowerUpType()
}

enum PowerUpType{
    VENOM_GRANADE
    SCOPE
    TELEPORT
    KINETIC_RAY
}

class Effect{
    -name : String
    -description: String
    +String getName()
    +String getDescription()
}

enum PlayerColor{
    GRAY
    YELLOW
    GREEN
    PURPLE
    CYAN
}

class PlayerDashboard{
    -ammos: List<AmmoColor>
    -damages: List<PlayerColor>
    -marks: List<PlayerColor>
    -loadedGuns: List<Gun>
    -unloadedGuns: List<Gun>
    -powerUpCards: List<PowerUpCard>
    -skullsNumber: int
    -points: int
    -firstPlayer: boolean

    +void addAmmo(AmmoColor ammo)
    +void removeAmmos(List<AmmoColor> ammos)
    +List<AmmoColor> getAmmos()
    +void addDamages(List<PlayerColor> damages)
    +void removeAllDamages()
    +List<PlayerColor> getDamages()
    +Optional<PlayerColor> getFirstDamage()
    +Optional<PlayerColor> getKillDamage()
    +Optional<PlayerColor> getCruelDamage()
    +void addMarks(List<PlayerColor> marks)
    +void removeMarks(List<PlayerColor> marks)
    +List<PlayerColor> getMarks()
    +void addLoadedGun(Gun loadedGun)
    +void removeLoadedGun(Gun loadedGun)
    +List<Gun> getLoadedGuns()
    +void addUnloadedGun(Gun unloadedGun)
    +void removeUnloadedGun(Gun loadedGun)
    +List<Gun> getUnloadedGuns()
    +void addPowerUpCard(PowerUpCard powerUp)
    +void removePowerUpCard(PowerUpCard powerUp)
    +List<PowerUpCard> getPowerUpCards()
    +void incrementSkullsNumber()
    +int getSkullsNumber()
    +void addPoints(int points)
    +int getPoints()
    +boolean getFirstPlayer()
}

class AmmoCard{
    -ammoColor: List<AmmoColor>
    -powerUpCard: Optional<PowerUpCard>
    
    +List<AmmoColor> getAmmoColor()
    +Optional<PowerUpCard> getPowerUpCard()
}

enum Action{
    MOVE
    SHOOT
    PICKUP
    RELOAD
}

class CompositeAction{
    -compositeAction: List<Action>
    +Action getCompositeAction()
}

class GameStatus{
    -killScore: List<Map.Entry<PlayerColor, Boolean>>
    -remainingSkulls: int
    -doubleKillScore: List<PlayerColor>
    -roundPlayer: PlayerColor

    +void addKillScore(PlayerColor playerColor, boolean cruelKill)
    +List<Map.Entry<PlayerColor, Boolean>> getKillScore()
    +int decrementSkulls()
    +int getRemainingSkulls()
    +void addDoubleKillScore(PlayerColor playerColor)
    +List<PlayerColor> getDoubleKillScore()
    +void setRoundPlayer(PlayerColor playerColor)
    +PlayerColor getRoundPlayer()
}


class Dashboard{
    -dashboardCells: List<DashboardCell>

    +List<DashboardCell> getDashboardCells()

}

enum DashboardCellBoundType{
    OPEN
    WALL
    DOOR
}

interface DashboardCell{
    +List<PlayerColor> getPlayersInCell()
    +Optional<DashboardCellBoundType> getNorthDashboardCellBoundType()
    +Optional<DashboardCellBoundType> getSouthDashboardCellBoundType()
    +Optional<DashboardCellBoundType> getWestDashboardCellBoundType()
    +Optional<DashboardCellBoundType> getEastDashboardCellBoundType()
    +Optional<DashboardCell> getNorthDashboardCell()
    +Optional<DashboardCell> getSouthDashboardCell()
    +Optional<DashboardCell> getWestDashboardCell()
    +Optional<DashboardCell> getEastDashboardCell()
    +void visit(Consumer<RespawnDashboardCell> visitRespawnDashboardCell, Consumer<PickupDashboardCell> visitPickupDashboardCell)
}
abstract class BaseDashboardCell implements DashboardCell{
    -playerInCell: List<PlayerColor>
    -northDashboardCellBoundType: DashboardCellBoundType
    -southDashboardCellBoundType: DashboardCellBoundType
    -westDashboardCellBoundType: DashboardCellBoundType
    -eastDashboardCellBoundType: DashboardCellBoundType
    -northDashboardCell: DashboardCell
    -southDashboardCell: DashboardCell
    -westDashboardCell: DashboardCell
    -eastDashboardCell: DashboardCell

}

class RespawnDashboardCell extends BaseDashboardCell{
    -availableGuns: List<Gun>
    +List<Gun> getAvailableGuns()
    +void removeAvailableGun(Gun gunToRemove)
    +void addAvailableGun(Gunt gunToAdd)
}

class PickupDashboardCell extends BaseDashboardCell{
    -ammoCard: Optional<AmmoCard>
    +AmmoCard getAmmoCard()
    +void setAmmoCard(AmmoCard ammoCard)
    +void removeAmmoCard()
}

@enduml