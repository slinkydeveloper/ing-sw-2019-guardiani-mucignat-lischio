@startuml

package com.adrenalinici.adrenaline.model {
  class Position {
    -line: int
    -cell: int

    +int cell()
    +int line()
  }

  enum AmmoColor {
      RED
      YELLOW
      BLUE
  }

  interface Gun {
      +List<AmmoColor> getRequiredAmmoToPickup();
      +List<AmmoColor> getRequiredAmmoToReload();
      +void visit(Consumer<AlternativeEffectGun> visitAlternativeEffectGun, Consumer<BaseEffectGun> visitBaseEffectGun)
  }

  BaseGun "1..n"-- AmmoColor: cost

  abstract class BaseGun implements Gun {
      -firstAmmo: AmmoColor
      -extraAmmo: List<AmmoColor>
      -name: String
      -note: Optional<String>
  }

  class AlternativeEffectGun extends BaseGun {
      -firstEffect: Effect
      -secondEffect: Effect
      -secondEffectCost: List<AmmoColor>

      +Effect getFirstEffect()
      +Effect getSecondEffect()
      +List<AmmoColor> getSecondEffectCost()
  }

  AlternativeEffectGun "0..n"-- AmmoColor: "second effect cost"
  AlternativeEffectGun "2..n"-- Effect

  class BaseEffectGun extends BaseGun {
      -baseEffect: Effect
      -firstExtraEffect: Optional<Effect>
      -firstExtraEffectCost: Optional<List<AmmoColor>>
      -secondExtraEffect: Optional<Effect>
      -secondExtraEffectCost: Optional<List<AmmoColor>>

      +Effect getBaseEffect()
      +Optional<Effect> getFirstExtraEffect()
      +Optional<List<AmmoColor>> getFirstExtraEffectCost()
      +Optional<Effect> getSecondExtraEffect()
      +Optional<List<AmmoColor>> getSecondExtraEffectCost()
  }

  BaseEffectGun "1"-- Effect: "first effect"
  BaseEffectGun "0..2"-- Effect: "extra effects"
  BaseEffectGun "0..n"-- AmmoColor: "first extra effect cost"
  BaseEffectGun "0..n"-- AmmoColor: "second extra effect cost"

  class PowerUpCard {
      -ammoColor: AmmoColor
      -powerUpType: PowerUpType
      +AmmoColor getAmmoColor()
      +PowerUpType getPowerUpType()
  }

  PowerUpCard "1..n"-- AmmoColor

  enum PowerUpType {
      VENOM_GRANADE
      SCOPE
      TELEPORT
      KINETIC_RAY
  }

  PowerUpCard "1"-- PowerUpType

  class Effect {
      -name : String
      -description: String
      -configFn: Function<GameController, EffectAvailableConfig>
      -applyFn: BiConsumer<EffectAvailableConfig, GameController>
      +String getName()
      +String getDescription()

      +EffectAvailableConfig generateConfig(GameController controller)
      +void applyEffect(EffectAvailableConfig config, GameController controller)
  }

  class EffectAvailableConfig {
    -hittablePlayers: List<PlayerColor>
    -possiblePreThisPlayerMoves: List<Integer[]>
    -possiblePostThisPlayerMoves: List<Integer[]>
    -possibleEnemiesMovements: Map<PlayerColor, List<PlayerColor>>
  }

  enum PlayerColor {
      GRAY
      YELLOW
      GREEN
      PURPLE
      CYAN
  }

  class PlayerDashboard {
      -ammos: List<AmmoColor>
      -damages: List<PlayerColor>
      -marks: List<PlayerColor>
      -loadedGuns: List<Gun>
      -unloadedGuns: List<Gun>
      -powerUpCards: List<PowerUpCard>
      -skullsNumber: int
      -points: int
      -firstPlayer: boolean

      +void addAmmo(AmmoColor ammo)
      +void removeAmmos(List<AmmoColor> ammos)
      +List<AmmoColor> getAmmos()
      +void addDamages(List<PlayerColor> damages)
      +void removeAllDamages()
      +List<PlayerColor> getDamages()
      +Optional<PlayerColor> getFirstDamage()
      +Optional<PlayerColor> getKillDamage()
      +Optional<PlayerColor> getCruelDamage()
      +void addMarks(List<PlayerColor> marks)
      +void removeMarks(List<PlayerColor> marks)
      +List<PlayerColor> getMarks()
      +void addLoadedGun(Gun loadedGun)
      +void removeLoadedGun(Gun loadedGun)
      +List<Gun> getLoadedGuns()
      +void addUnloadedGun(Gun unloadedGun)
      +void removeUnloadedGun(Gun loadedGun)
      +List<Gun> getUnloadedGuns()
      +void addPowerUpCard(PowerUpCard powerUp)
      +void removePowerUpCard(PowerUpCard powerUp)
      +List<PowerUpCard> getPowerUpCards()
      +void incrementSkullsNumber()
      +int getSkullsNumber()
      +void addPoints(int points)
      +int getPoints()
      +boolean getFirstPlayer()
  }

  PlayerDashboard "0..9"-- AmmoColor
  PlayerDashboard "0..12"-- PlayerColor: "damages"
  PlayerDashboard "0..n"-- PlayerColor: "marks"
  PlayerDashboard "0..3"-- PlayerColor: "guns"
  PlayerDashboard "0..n"-- PowerUpCard: "power up cards"

  class AmmoCard {
      -ammoColor: List<AmmoColor>
      -powerUpCard: Optional<PowerUpCard>

      +List<AmmoColor> getAmmoColor()
      +Optional<PowerUpCard> getPowerUpCard()
  }

  AmmoCard "2..3"-- AmmoColor
  AmmoCard "0..1"-- PowerUpCard

  enum Action {
      MOVE_MOVE_MOVE
      MOVE_PICKUP
      SHOOT
      MOVE_MOVE_PICKUP
      MOVE_SHOOT
      MOVE_RELOAD_SHOOT
      MOVE_MOVE_MOVE_MOVE
      MOVE_MOVE_RELOAD_SHOOT
      MOVE_MOVE_MOVE_PICKUP
  }

  class GameStatus {
      -killScore: List<Map.Entry<PlayerColor, Boolean>>
      -remainingSkulls: int
      -doubleKillScore: List<PlayerColor>
      -roundPlayer: PlayerColor
      -dashboard: Dashboard
      -playerDashboards: List<PlayerDashboard>

      +void addKillScore(PlayerColor playerColor, boolean cruelKill)
      +List<Map.Entry<PlayerColor, Boolean>> getKillScore()
      +int decrementSkulls()
      +int getRemainingSkulls()
      +void addDoubleKillScore(PlayerColor playerColor)
      +List<PlayerColor> getDoubleKillScore()
      +void setRoundPlayer(PlayerColor playerColor)
      +PlayerColor getRoundPlayer()
  }

  com.adrenalinici.adrenaline.observer.Observable <|-- GameStatus: "T::ModelEvent"

  note left: killScore is a list of tuples\nwhere PlayerColor is the color of the\nkiller and the Boolean represents cruel kill

  GameStatus "0..8"-- PlayerColor: "assassins"
  GameStatus "0..n"-- PlayerColor: "double kills"
  GameStatus "1"-- PlayerColor: "round of player"

  class Dashboard {
      -dashboardCells: List<DashboardCell>

      +List<DashboardCell> getDashboardCells()
  }

  enum DashboardCellBoundType{
      OPEN
      WALL
      DOOR
  }

  interface DashboardCell {
      +List<PlayerColor> getPlayersInCell()
      +Optional<DashboardCellBoundType> getNorthDashboardCellBoundType()
      +Optional<DashboardCellBoundType> getSouthDashboardCellBoundType()
      +Optional<DashboardCellBoundType> getWestDashboardCellBoundType()
      +Optional<DashboardCellBoundType> getEastDashboardCellBoundType()
      +Optional<DashboardCell> getNorthDashboardCell()
      +Optional<DashboardCell> getSouthDashboardCell()
      +Optional<DashboardCell> getWestDashboardCell()
      +Optional<DashboardCell> getEastDashboardCell()
      +void visit(Consumer<RespawnDashboardCell> visitRespawnDashboardCell, Consumer<PickupDashboardCell> visitPickupDashboardCell)
  }

  DashboardCell --*"0..n" Dashboard

  abstract class BaseDashboardCell implements DashboardCell {
      -playerInCell: List<PlayerColor>
      -northDashboardCellBoundType: DashboardCellBoundType
      -southDashboardCellBoundType: DashboardCellBoundType
      -westDashboardCellBoundType: DashboardCellBoundType
      -eastDashboardCellBoundType: DashboardCellBoundType
  }

  BaseDashboardCell "4"-- DashboardCellBoundType

  class RespawnDashboardCell extends BaseDashboardCell {
      -availableGuns: List<Gun>
      +List<Gun> getAvailableGuns()
      +void removeAvailableGun(Gun gunToRemove)
      +void addAvailableGun(Gun gunToAdd)
  }

  RespawnDashboardCell "0..3"-- Gun

  class PickupDashboardCell extends BaseDashboardCell {
      -ammoCard: Optional<AmmoCard>
      +AmmoCard getAmmoCard()
      +void setAmmoCard(AmmoCard ammoCard)
      +void removeAmmoCard()
  }

  PickupDashboardCell "0..1"-- AmmoCard

}

package com.adrenalinici.adrenaline.events {
  interface ViewEvent {
    +GameView getGameView()
  }

  class FirstTurnEvent implements ViewEvent {
    -player: PlayerColor
    +PlayerColor getPlayer()
  }

  class NewTurnEvent implements ViewEvent {
    -player: PlayerColor
    +PlayerColor getPlayer()
  }

  class ActionChosenEvent implements ViewEvent {
    -action: Action
    +Action getAction()
  }

  class MovementChosenEvent implements ViewEvent {
    -movement: Position
    +Position getMovement()
  }

  class GunChosenEvent implements ViewEvent {
    -gun: Gun
    +Gun getChosenGun()
  }

  class ChosenEffectConfigurationEvent implements ViewEvent {
    -playersToHit: List<PlayerColor>
    -effectToApply: Effect
    -numberOfScopePowerUpUsed: int
    +List<PlayerColor> getPlayersToHit()
    +Effect getEffectToApply()
    +int getNumberOfScopePowerUpUsed()
  }

  class ChosenRespawnLocationEvent implements ViewEvent {
    -respawnCell: Position
    +Position getRespawnCell()
  }

  class ReloadGunsEvent implements ViewEvent {
    -gunsToReload: List<Gun>
    +List<Gun> getGunsToReload()
  }

  class ChosenBaseEffectConfigurationEvent implements ViewEvent {
    -baseEffectPlayersToHit: List<PlayerColor>
    -extraEffectOnePlayersToHit: List<PlayerColor>
    -extraEffectTwoPlayersToHit: List<PlayerColor>
    -numberOfScopePowerUpUsed: int
    +List<PlayerColor> getBaseEffectPlayersToHit()
    +PlayerColor getExtraEffectOnePlayersToHit()
    +PlayerColor getExtraEffectTwoPlayersToHit()
    +int getNumberOfScopePowerUpUsed()
  }

  class VenomGranadeChosenEvent implements ViewEvent{
    -chosenVenomGranades: List<PowerUpCard>
    +List<PowerUpCard> getChosenVenomGranades()
  }

  class EnemyChosenEvent implements ViewEvent{
    -chosenEnemy: PlayerColor
    +PlayerColor getChosenEnemy()
  }

  class EnemyMovementChosenEvent implements ViewEvent{
    -chosenEnemyMovement: Position
    +Position getChosenEnemyMovement()
  }

  interface ModelEvent{
    +GameStatus getGameStatus()
  }

  class DashboardCellUpdatedEvent implements ModelEvent{
    -dashboard: Dashboard
    -dashboardCell: DashboardCell
    +Dashboard getDashboard()
    +DashboardCell getDashboardCell()
  }

  class PlayerDashboardUpdatedEvent implements ModelEvent{
    -playerDashboard: PlayerDashboard
    +PlayerDashboard getPlayerDashboard()
  }

  class GameStatusUpdatedEvent implements ModelEvent{
    -killerColor: PlayerColor
    -cruelKill: Boolean
  }
}


package com.adrenalinici.adrenaline.controller {

  package com.adrenalinici.adrenaline.controller.guns {

    AlternativeEffectGunFactory ..> GunFactory
    BaseEffectGunFactory ..> GunFactory
    MachineGunGunFactory ..> BaseEffectGunFactory
    ZX2GunFactory ..> AlternativeEffectGunFactory

    abstract class AlternativeEffectGunFactory implements GunFactory {

        + AlternativeEffectGun getModelGun (String key, ObjectNode config)
        + public DecoratedAlternativeEffectGun getDecoratedGun(String key, ObjectNode config)
      }
   abstract class BaseEffectGunFactory implements GunFactory {

       +BaseEffectGun getModelGun(String key, ObjectNode config)
       +DecoratedBaseEffectGun getDecoratedGun(String key, ObjectNode config)
     }

   class MachineGunGunFactory extends BaseEffectGunFactory {
     - {static} final TriConsumer<BaseEffectGunFlowState, GameModel, ControllerFlowContext>

     +boolean canConsume(String key, ObjectNode config)
     +List<ControllerFlowNode> getAdditionalNodes(String key, ObjectNode config)
     }

     class ZX2GunFactory extends AlternativeEffectGunFactory {
      - {static} final TriConsumer<AlternativeEffectGunFlowState, GameModel, ControllerFlowContext> BASE_EFFECT_APPLY
      - {static} final TriConsumer<AlternativeEffectGunFlowState, GameModel, ControllerFlowContext> SCANNER_EFFECT_APPLY

     + boolean canConsume(String key, ObjectNode config)
     + List<ControllerFlowNode> getAdditionalNodes(String key, ObjectNode config)
     }

  }
  package com.adrenalinici.adrenaline.controller.flow{
    package com.adrenalinici.adrenaline.controller.flow.impl{

    }
  }

  package com.adrenalinici.adrenaline.controller.nodes{

    NewTurnFlowNode <|-- StatelessControllerFlowNode
          class NewTurnFlowNode implements StatelessControllerFlowNode {

           + String id()
           + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
           + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
         }

    enum ControllerNodes {
            START_TURN,
            PICKUP,
            RELOAD,
            CHOOSE_ACTION,
            RESPAWN_KILLED_PEOPLE,
            CHOOSE_GUN,
            CHOOSE_PLAYER_TO_HIT,
            ALTERNATIVE_GUN_START,
            BASE_GUN_START;

            + static String movement(int distance)
            + static String applyGunEffect(String gunId, String effectId)
          }

          PickupFlowNode <|-- StatelessControllerFlowNode
                  class PickupFlowNode implements StatelessControllerFlowNode {

                    + String id()
                    + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                    + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                    }

        ChooseActionFlowNode <|-- StatelessControllerFlowNode
              class ChooseActionFlowNode implements StatelessControllerFlowNode {

                + String id()
                + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                - List<Action> calculateAvailableActions()
              }
               ChooseGunFlowNode <|-- StatelessControllerFlowNode
              class ChooseGunFlowNode implements StatelessControllerFlowNode {
                + String id()
                + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
               }
                ChooseMovementFlowNode <|-- StatelessControllerFlowNode
               class ChooseMovementFlowNode implements StatelessControllerFlowNode {
                  - int distance

                  + ChooseMovementFlowNode(int distance)
                  + String id()
                  + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                  + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
               }

               ReloadFlowNode <|-- StatelessControllerFlowNode
              class ReloadFlowNode implements StatelessControllerFlowNode {

                  + String id()
                  + void onJump(VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)
                  + void handleEvent(ViewEvent event, VoidState flowState, GameView view, GameModel model, ControllerFlowContext context)

              }


    package com.adrenalinici.adrenaline.controller.nodes.guns{

      AlternativeEffectGunFlowState ..> GunFlowState

      class AlternativeEffectGunFlowState extends GunFlowState {
        - Boolean firstEffect;
        - DecoratedEffect chosenEffect;

        + AlternativeEffectGunFlowState(DecoratedAlternativeEffectGun chosenGun)
        + DecoratedAlternativeEffectGun getChosenGun()
        + DecoratedEffect getChosenEffect()
        + AlternativeEffectGunFlowState setChosenEffect(DecoratedEffect chosenEffect, boolean chosenEffectIsFirstEffect)
        + boolean isFirstEffect()
        + ObjectNode resolvePhaseConfiguration(String phaseId)
      }

      class ApplyBaseGunFlowNode  {
        - String nodeId
        - TriConsumer<BaseEffectGunFlowState, GameModel, ControllerFlowContext> consumer

        + String id()
        + void onJump(BaseEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
        + void handleEvent(ViewEvent event, BaseEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
      }

       BaseEffectGunFlowState ..> GunFlowState

      class BaseEffectGunFlowState extends GunFlowState {
        - boolean activatedFirstExtraEffect
        - boolean activatedSecondExtraEffect

        + DecoratedBaseEffectGun getChosenGun()
        + boolean isActivatedFirstExtraEffect()
        + BaseEffectGunFlowState setActivatedFirstExtraEffect(boolean activatedFirstExtraEffect)
        + boolean isActivatedSecondExtraEffect()
        + BaseEffectGunFlowState setActivatedSecondExtraEffect(boolean activatedSecondExtraEffect)
        + ObjectNode resolvePhaseConfiguration(String phaseId)
      }

      class ChooseAlternativeEffectForGunFlowNode  {
        - int distance

        + String id()
        + void onJump(AlternativeEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
        + void handleEvent(ViewEvent event, AlternativeEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
        - boolean canUseSecondEffect(GameModel model, PlayerColor playerColor, AlternativeEffectGun gun)
      }




      class ChooseBaseEffectForGunFlowNode  {

      + String id()
      + void onJump(BaseEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
      + void handleEvent(ViewEvent event, BaseEffectGunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
      - boolean canUseFirstExtraEffect(GameModel model, PlayerColor playerColor, BaseEffectGun gun)
      - boolean canUseSecondExtraEffect(GameModel model, PlayerColor playerColor, BaseEffectGun gun)
      }

      class ChoosePlayersToHitFlowNode {

        + String id()
        + void onJump(GunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
        + void handleEvent(ViewEvent event, GunFlowState flowState, GameView view, GameModel model, ControllerFlowContext context)
        - int resolveHittablePlayersNumber(GunFlowState flowState)
        - TriPredicate<PlayerColor, PlayerColor, GameModel> resolveDistanceEvalPredicate(GunFlowState flowState)
        }
         G ..> Gun
        interface GunFlowNodesFactory<G extends Gun> {
          + boolean canConsume(String key, JsonNode config)
          + List<ControllerFlowNode> create(G gun, JsonNode gunConfig)
        }


      }



  }

  class ControllerFlowContext extends BaseFlowContext {
  -int remainingActions;
  -PlayerColor turnOfPlayer;
  - List<PlayerColor> killedPlayers;
  - GunLoader loader;

  + int getRemainingActions()
  + ControllerFlowContext setRemainingActions(int remainingActions)
  + ControllerFlowContext decrementRemainingActions()
  + PlayerColor getTurnOfPlayer()
  + ControllerFlowContext setTurnOfPlayer(PlayerColor turnOfPlayer)
  + List<PlayerColor> getKilledPlayers()
  + ControllerFlowContext setKilledPlayers(List<PlayerColor> killedPlayers)
  + GunLoader getGunLoader()
  }


interface ControllerFlowNode<T extends FlowState> extends FlowNode {
<T, ControllerFlowContext>
}

class DecoratedAlternativeEffectGun extends DecoratedGun {

  - DecoratedEffect firstEffect
  - DecoratedEffect secondEffect

  + DecoratedEffect getFirstEffect()
  + DecoratedEffect getSecondEffect()
  + AlternativeEffectGun get()
}

class DecoratedBaseEffectGun extends DecoratedGun {

  - DecoratedEffect baseEffect
  - DecoratedEffect firstExtraEffect
  - DecoratedEffect secondExtraEffect

  + DecoratedEffect getBaseEffect()
  + List<AmmoColor> getFirstExtraEffectCost()
  + DecoratedEffect getFirstExtraEffect()
  + boolean hasFirstExtraEffect()
  + List<AmmoColor> getSecondExtraEffectCost()
  + DecoratedEffect getSecondExtraEffect()
  + boolean hasSecondExtraEffect()
  + BaseEffectGun get()
}

class DecoratedEffect {
  - Effect effect
  - List<String> additionalPhases
  - List<AmmoColor> requiredAmmos

  + Effect get()
  + String getId()
  + String getName()
  + String getDescription()
  + List<AmmoColor> getRequiredAmmos()
  + List<String> getAdditionalPhases()
}

abstract class DecoratedGun implements Gun {
  - Gun gun
  - List<String> phases

  + DecoratedGun(Gun gun, List<String> phases)
  + Gun get()
  +void visit(Consumer<AlternativeEffectGun> visitAlternativeEffectGun, Consumer<BaseEffectGun> visitBaseEffectGun)
  + String getId()
  + List<AmmoColor> getRequiredAmmoToPickup()
  + List<AmmoColor> getRequiredAmmoToReload()
  + String getName()
  + Optional<String> getNote()
  + List<String> getPhases()
}

 class GameController  {

  - GameModel gameModel
  - FlowOrchestrator<ControllerFlowContext> flowOrchestrator

  + public GameController(List<? extends FlowNode> flowNodes, GameModel gameModel)
  + void onEvent(ViewEvent event)
  - PlayerColor nextTurnPlayer()
  + endTurnCallback(GameView view)
  - void startNewTurn(GameView view, PlayerColor player)
  # ControllerFlowContext getFlowContext()
}

interface GunFactory {

  +boolean canConsume(String key, ObjectNode config)

  + Gun getModelGun(String key, ObjectNode config)
  + DecoratedGun getDecoratedGun(String key, ObjectNode config)
  + List<ControllerFlowNode> getAdditionalNodes(String key, ObjectNode config)
}

class GunLoader {
  + {static} JsonNode ?????????????
  - List<GunFactory> factories

  + GunLoader(List<GunFactory> factories)
  + Gun getModelGun(String id)
  + DecoratedGun getDecoratedGun(String id)
  + List<ControllerFlowNode> getAdditionalNodes(String id)
  + GunFactory resolveGunFactory(String id)
}

  class CardDeck<T> {
    -List<T> queue

    +CardDeck(List<T> queue)
    +Optional<T> getCard()
     }

  class GameController {
    -gameModel: GameStatus
    -remainingActions: int

    -void doFirstTurn(PlayerColor player)
    -void doTurn(PlayerColor player)
  }

 interface StatelessControllerFlowNode extends StatelessFlowNode {
  <ControllerFlowContext>
 }
  com.adrenalinici.adrenaline.observer.Observer <|.. GameController: "T::ViewEvent"

  interface DecoratedGun extends com.adrenalinici.adrenaline.model.Gun {
    +void acceptEvent(ViewEvent viewEventToAccept)
  }

  class DecoratedAlternativeEffectGun extends com.adrenalinici.adrenaline.model.AlternativeEffectGun implements DecoratedGun

  class DecoratedBaseEffectGun extends com.adrenalinici.adrenaline.model.BaseEffectGun implements DecoratedGun

}


package com.adrenalinici.adrenaline.controller.states {
  interface ControllerState {
    +void acceptEvent(ViewEvent viewEventToAccept)
    +List<Supplier<ControllerState>> getNextStatesFactories()
  }

  class ExpectingMoveState implements ControllerState{

  }

  class ExpectingPickupState implements ControllerState{

  }

  class ExpectingShootState implements ControllerState{

  }

  class ExecutingGunFlowState implements ControllerState{

  }

  class ShootCompletedState implements ControllerState{

  }




}



package com.adrenalinici.adrenaline.view {
  class GameView {
    +void showAvailableActions(List<CompositeAction> actions)
    +void showAvailableMovements(List<Position> availableMovements)
    +void showReloadableGuns(List<Gun> reloadableGuns)
    +void showLoadedGuns(List<Gun> reloadableGuns)
    +void showBaseGunExtraEffects(List<Effect> effects)
    +void showAvailableRespawnLocations(List<AmmoColor> respawnLocations)
    +void showApplicableEffects(Optional<Map<PlayerColor, Optional<Position>>> firstEffect, int numberOfChoosablePlayerFirstEffect, Optional<Map<PlayerColor, Optional<Position>>> secondEffect, int numberOfChoosablePlayerSecondEffect)
    +void showApplicableEffects(Map<PlayerColor, Optional<Position>> baseEffect, int numberOfChoosablePlayerBaseEffect, Optional<Map<PlayerColor, Optional<Position>>> firstExtraEffect, int numberOfChoosablePlayerFirstExtraEffect, Optional<Map<PlayerColor, Optional<Position>>> secondExtraEffect, int numberOfChoosablePlayerSecondExtraEffect)
    +void showAvailableVenomGranades(PlayerColor player)
    +void showAvailablePowerUpCards(PlayerColor player)
    +void showAvailableEnemyMovements(List<Position> availableEnemyMovements)
  }

  com.adrenalinici.adrenaline.observer.Observable <|-- GameView: "T::ViewEvent"
  com.adrenalinici.adrenaline.observer.Observer <|.. GameView: "T::ModelEvent"

  note bottom: the two different showApplicableEffects methods are called from AlternativeEffectGun (first one) and from BaseEffectGun (second one)
}

package com.adrenalinici.adrenaline.observer {
   interface Observer<T>
   class Observable<T>
}

@enduml
